[
  {
    "id": 1,
    "question_en": "What is backend development?",
    "answer_en": "Backend development refers to server-side development - the part of web development that deals with the server, databases, and application logic that users don't see directly. Backend developers work on the infrastructure that powers the frontend.\n\nKey responsibilities:\n• **Server logic:** Writing code that runs on servers\n• **Database management:** Storing, retrieving, and managing data\n• **API development:** Creating endpoints for frontend communication\n• **Security:** Implementing authentication, authorization, data protection\n• **Performance optimization:** Ensuring fast response times and scalability\n• **Infrastructure:** Managing servers, deployment, and monitoring\n\nCommon technologies:\n• Languages: Python, Java, JavaScript (Node.js), PHP, C#, Go\n• Databases: MySQL, PostgreSQL, MongoDB, Redis\n• Frameworks: Express.js, Django, Spring Boot, Laravel",
    "question_ar": "ما هو تطوير الخادم؟",
    "answer_ar": "تطوير الخادم يشير إلى التطوير من جانب الخادم - الجزء من تطوير الويب الذي يتعامل مع الخادم وقواعد البيانات ومنطق التطبيق الذي لا يراه المستخدمون مباشرة. مطورو الخادم يعملون على البنية التحتية التي تشغل الواجهة الأمامية.\n\nالمسؤوليات الرئيسية:\n• **منطق الخادم:** كتابة كود يعمل على الخوادم\n• **إدارة قواعد البيانات:** تخزين واسترجاع وإدارة البيانات\n• **تطوير API:** إنشاء نقاط النهاية للتواصل مع الواجهة الأمامية\n• **الأمان:** تنفيذ المصادقة والتفويض وحماية البيانات\n• **تحسين الأداء:** ضمان أوقات استجابة سريعة وقابلية التوسع\n• **البنية التحتية:** إدارة الخوادم والنشر والمراقبة\n\nالتقنيات الشائعة:\n• اللغات: Python، Java، JavaScript (Node.js)، PHP، C#، Go\n• قواعد البيانات: MySQL، PostgreSQL، MongoDB، Redis\n• أطر العمل: Express.js، Django، Spring Boot، Laravel"
  },
  {
    "id": 2,
    "question_en": "What is an API?",
    "answer_en": "API (Application Programming Interface) is a set of protocols, routines, and tools for building software applications. It specifies how software components should interact and allows different applications to communicate with each other.\n\nTypes of APIs:\n• **REST APIs:** Use HTTP methods (GET, POST, PUT, DELETE)\n• **GraphQL:** Query language for APIs with flexible data fetching\n• **SOAP:** Protocol for exchanging structured information\n• **WebSocket APIs:** Real-time bidirectional communication\n\nKey concepts:\n• **Endpoints:** Specific URLs where API can be accessed\n• **HTTP methods:** Different actions (GET, POST, PUT, DELETE)\n• **Status codes:** Indicate the result of API requests\n• **Authentication:** Securing API access\n• **Rate limiting:** Controlling API usage\n\nBest practices:\n• Clear and consistent naming\n• Proper error handling\n• Comprehensive documentation\n• Version control",
    "question_ar": "ما هو API؟",
    "answer_ar": "API (واجهة برمجة التطبيقات) هو مجموعة من البروتوكولات والإجراءات والأدوات لبناء تطبيقات البرمجيات. يحدد كيفية تفاعل مكونات البرمجيات ويسمح لتطبيقات مختلفة بالتواصل مع بعضها البعض.\n\nأنواع APIs:\n• **REST APIs:** تستخدم طرق HTTP (GET، POST، PUT، DELETE)\n• **GraphQL:** لغة استعلام لـ APIs مع جلب بيانات مرن\n• **SOAP:** بروتوكول لتبادل المعلومات المنظمة\n• **WebSocket APIs:** تواصل ثنائي الاتجاه في الوقت الفعلي\n\nالمفاهيم الرئيسية:\n• **نقاط النهاية:** URLs محددة حيث يمكن الوصول إلى API\n• **طرق HTTP:** إجراءات مختلفة (GET، POST، PUT، DELETE)\n• **رموز الحالة:** تشير إلى نتيجة طلبات API\n• **المصادقة:** تأمين الوصول إلى API\n• **تحديد المعدل:** التحكم في استخدام API\n\nأفضل الممارسات:\n• تسمية واضحة ومتسقة\n• معالجة أخطاء مناسبة\n• توثيق شامل\n• التحكم في الإصدار"
  }
]
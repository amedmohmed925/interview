[
  {
    "id": 1,
    "question_en": "What is Node.js?",
    "answer_en": "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine that allows you to run JavaScript on the server side. It enables developers to use JavaScript for both frontend and backend development.\n\nKey features:\n• **Event-driven architecture:** Non-blocking I/O operations\n• **Single-threaded:** Uses an event loop for handling requests\n• **NPM ecosystem:** Vast package manager with millions of packages\n• **Cross-platform:** Runs on Windows, macOS, and Linux\n• **Fast execution:** Built on V8 engine\n\nUse cases:\n• Web servers and APIs\n• Real-time applications (chat, gaming)\n• Microservices architecture\n• Command-line tools\n• Desktop applications (with Electron)\n\nAdvantages:\n• Same language for frontend and backend\n• High performance for I/O intensive applications\n• Large community and ecosystem\n• Rapid development",
    "question_ar": "ما هو Node.js؟",
    "answer_ar": "Node.js هو بيئة تشغيل JavaScript مبنية على محرك V8 JavaScript من Chrome والتي تتيح لك تشغيل JavaScript على جانب الخادم. يمكن المطورين من استخدام JavaScript لكل من تطوير الواجهة الأمامية والخلفية.\n\nالميزات الرئيسية:\n• **البنية المدفوعة بالأحداث:** عمليات I/O غير محجوبة\n• **أحادي الخيط:** يستخدم حلقة أحداث للتعامل مع الطلبات\n• **نظام NPM البيئي:** مدير حزم واسع مع ملايين الحزم\n• **متعدد المنصات:** يعمل على Windows وmacOS وLinux\n• **تنفيذ سريع:** مبني على محرك V8\n\nحالات الاستخدام:\n• خوادم الويب وAPIs\n• التطبيقات في الوقت الفعلي (الدردشة، الألعاب)\n• بنية الخدمات الميكروية\n• أدوات سطر الأوامر\n• تطبيقات سطح المكتب (مع Electron)\n\nالمزايا:\n• نفس اللغة للواجهة الأمامية والخلفية\n• أداء عالي للتطبيقات كثيفة I/O\n• مجتمع ونظام بيئي كبير\n• تطوير سريع"
  },
  {
    "id": 2,
    "question_en": "What is the difference between SQL and NoSQL databases?",
    "answer_en": "SQL and NoSQL are two different approaches to database management, each with distinct characteristics and use cases.\n\n**SQL (Relational) Databases:**\n• **Structure:** Table-based with rows and columns\n• **Schema:** Fixed schema, data must conform to predefined structure\n• **ACID properties:** Atomicity, Consistency, Isolation, Durability\n• **Relationships:** Support complex joins and relationships\n• **Examples:** MySQL, PostgreSQL, SQL Server, Oracle\n\n**NoSQL (Non-relational) Databases:**\n• **Structure:** Document, key-value, column-family, or graph\n• **Schema:** Flexible or schema-less design\n• **Scalability:** Designed for horizontal scaling\n• **Performance:** Optimized for specific use cases\n• **Examples:** MongoDB, Cassandra, Redis, Neo4j\n\n**When to use SQL:**\n• Complex queries and reporting\n• Strong consistency requirements\n• Well-defined schema\n\n**When to use NoSQL:**\n• Rapid development and iteration\n• Large-scale applications\n• Flexible data models",
    "question_ar": "ما الفرق بين قواعد بيانات SQL وNoSQL؟",
    "answer_ar": "SQL وNoSQL هما نهجان مختلفان لإدارة قواعد البيانات، كل منهما له خصائص وحالات استخدام مميزة.\n\n**قواعد بيانات SQL (العلائقية):**\n• **الهيكل:** قائم على الجداول مع صفوف وأعمدة\n• **المخطط:** مخطط ثابت، البيانات يجب أن تتوافق مع هيكل محدد مسبقاً\n• **خصائص ACID:** الذرية، الاتساق، العزل، الديمومة\n• **العلاقات:** تدعم الربط المعقد والعلاقات\n• **أمثلة:** MySQL، PostgreSQL، SQL Server، Oracle\n\n**قواعد بيانات NoSQL (غير العلائقية):**\n• **الهيكل:** وثيقة، مفتاح-قيمة، عائلة أعمدة، أو رسم بياني\n• **المخطط:** تصميم مرن أو بدون مخطط\n• **قابلية التوسع:** مصممة للتوسع الأفقي\n• **الأداء:** محسّنة لحالات استخدام محددة\n• **أمثلة:** MongoDB، Cassandra، Redis، Neo4j\n\n**متى تستخدم SQL:**\n• الاستعلامات المعقدة والتقارير\n• متطلبات الاتساق القوية\n• مخطط محدد جيداً\n\n**متى تستخدم NoSQL:**\n• التطوير والتكرار السريع\n• التطبيقات واسعة النطاق\n• نماذج بيانات مرنة"
  }
]